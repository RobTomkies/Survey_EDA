value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = -1))
xmin <- stats::optimize(f1, c(-100,100), a = 4, maximum = T)
xmin <- stats::optimize(f1, c(-100,100), a = 4, maximum = T)
print(xmin)
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
while(trigger == F){
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...)
print(xmina)
if(xmina$minimum == xminb$minimum){
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
} else{
increase_distance <- 5 * increase_distance
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = -1))
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
while(trigger == F){
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...)
print(xminb)
if(xmina$minimum == xminb$minimum){
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
} else{
increase_distance <- 5 * increase_distance
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = -1))
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
while(trigger == F){
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...)
print(xminb)
if(xmina$minimum == xminb$minimum){
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
} else{
increase_distance <- 5 * increase_distance
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = -1))
rm(list = ls())
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
while(trigger == F){
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...)
print(xminb)
if(xmina$minimum == xminb$minimum){
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
} else{
increase_distance <- 5 * increase_distance
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = -1))
pacman::p_load(Rcpp, sloop)
f1 <- function(x, a=0) {
# square each of the elements of x after subtracting scalar a
return((x-a)^2)
}
f2 <- function(x,a=c(0,0)) {
# distance of x from the the point a in the 2D plane
return(sqrt((x[1]-a[1])^2 + (x[2]-a[2])^2))
}
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
while(trigger == F){
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...)
print(xminb)
if(xmina$minimum == xminb$minimum){
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
} else{
increase_distance <- 5 * increase_distance
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = -1))
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
while(trigger == F){
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...)
xmina$minimum
xminb$minimum
if(xmina$minimum == xminb$minimum){
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
} else{
increase_distance <- 5 * increase_distance
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = -1))
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
while(trigger == F){
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...)
print(xmina$minimum)
print(xminb$minimum)
if(xmina$minimum == xminb$minimum){
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
} else{
increase_distance <- 5 * increase_distance
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = -1))
is.na(NULL)
is.null(NULL)
5^5
5^10
5^11
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
increase_counter <- 0
while(trigger == F){
if(increase_counter >= 10){stop(paste('No max/min found within ', 5^10, ' of estimate, please consider'))}
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...,
maximum = max_trigger)
if(any(is.null(c(xmina$minimum, xminb$minimum))) & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <-  increase_counter + 1
}
else if(xmina$minimum != xminb$minimum & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <- increase_counter + 1
} else{
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = -1))
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
increase_counter <- 0
while(trigger == F){
if(increase_counter >= 10){stop(paste('No max/min found within +/- ', 5^10, ' of estimate, please consider'))}
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...,
maximum = max_trigger)
if(any(is.null(c(xmina$minimum, xminb$minimum))) & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <-  increase_counter + 1
}
else if(xmina$minimum != xminb$minimum & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <- increase_counter + 1
} else{
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = -1))
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
increase_counter <- 0
while(trigger == F){
if(increase_counter >= 10){stop(paste('No max/min found within +/- ', 5^10, ' of estimate, please consider'))}
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...,
maximum = max_trigger)
if(any(is.null(c(xmina$minimum, xminb$minimum))) & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <-  increase_counter + 1
}
else if(xmina$minimum != xminb$minimum & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <- increase_counter + 1
} else{
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = 1))
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
increase_counter <- 0
while(trigger == F){
if(increase_counter >= 10){stop(paste('No max/min found within +/- ', 5^10, ' of estimate, please consider'))}
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...,
maximum = max_trigger)
if(any(is.null(c(xmina$minimum, xminb$minimum))) & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <-  increase_counter + 1
}
else if(xmina$minimum != xminb$minimum & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <- increase_counter + 1
} else{
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(4), control = list(fnscale = 1))
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
increase_counter <- 0
while(trigger == F){
if(increase_counter >= 10){stop(paste('No max/min found within +/- ', 5^10, ' of estimate, please consider'))}
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...,
maximum = max_trigger)
if(any(is.null(c(xmina$minimum, xminb$minimum))) & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <-  increase_counter + 1
}
else if(xmina$minimum != xminb$minimum & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <- increase_counter + 1
} else{
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0,0),f2, a = c(4,8), control = list(fnscale = 1))
koptim(c(0,0),f2, a = c(4,8), control = list(fnscale = 1))
koptim(c(0,0),f2, a = c(4,8), control = list(fnscale = -1))
koptim(c(0),f1, a = c(4,8), control = list(fnscale = -1))
koptim(c(0),f1, a = c(8), control = list(fnscale = -1))
koptim(c(0),f1, a = c(8), control = list(fnscale = 1))
koptim <- function(par, fn, ..., control = list(fnscale = 1)){
if(length(par)==1){
max_trigger <- ifelse(control$fnscale == -1, T,
ifelse(control$fnscale == 1, F,
stop('fnscale value 1 for minimum and -1 for maximum')))
trigger <- F
increase_distance <- 5
increase_counter <- 0
while(trigger == F){
if(increase_counter >= 10){stop(paste('No max/min found within +/- ', 5^10, ' of estimate, please consider search start and max/min choice'))}
xmina <- stats::optimize(fn, c(par-increase_distance,
par+increase_distance),
...,
maximum = max_trigger )
xminb <- stats::optimize(fn, c(par-(5*increase_distance),
par+(5*increase_distance)),
...,
maximum = max_trigger)
if(any(is.null(c(xmina$minimum, xminb$minimum))) & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <-  increase_counter + 1
}
else if(xmina$minimum != xminb$minimum & increase_counter < 10){
increase_distance <- 5 * increase_distance
increase_counter <- increase_counter + 1
} else{
trigger <- T
outputs<- list(par = c(xmina$minimum),
value = c(xmina$objective))
}
}
}
else if(length(par)>1){
xmin <- stats::optim(par = par, fn = fn, control = control, ...)
outputs<- list(par = c(xmin$par),
value = c(xmin$value))
}
return(outputs)
}
koptim(c(0),f1, a = c(8), control = list(fnscale = 1))
koptim(c(0),f1, a = c(8), control = list(fnscale = 1))
koptim(c(0),f1, a = c(8), control = list(fnscale = -1))
koptim(c(0),f1, a = c(4))
koptim(c(0,0),f2, a = c(1,2))
knit_with_parameters("~/University lectures/Data501/assignment3/data501_rcpp/Assignment_3.Rmd", encoding = "UTF-8")
pacman::p_load(roxygen2, devtools, knitr, testthat)
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA")
getwd()
create_package("~/OneDrive/Documents/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
here::dr_here()
create_package("~/OneDrive/Documents/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
