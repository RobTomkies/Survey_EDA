ncol = c(original = original_ncol , adjusted = updated_ncol)),
memory_size = memory_size,
data_type_conversion = data_types,
data_type_names = dt_type_frame,
missingness_percentage = missingness_vector,
grouped_missingness = missingness_groups,
repeat_rows = repeat_row_count,
data = updated_data$data
)
class(output) <- 'data_describe'
return(output)
}
#' @export
print.data_describe <- function(x){
x <- unclass(x)
pander(x$dimensions, caption = "Data Dimensions")
general_stats <- data.frame(rbind(c(x$repeat_rows, x$memory_size)))
names(general_stats) <- c('Identical Rows Count', 'Memory Size (B)')
pander(general_stats, caption = "General Data Statistics")
pander(x$data_type_conversion, caption = "Original and detected data type converted to")
output_dt_mis <- x$grouped_missingness
output_dt_mis[is.na(output_dt_mis)] <- ""
pander(output_dt_mis, caption = "Data fields by Missingness (%)", split.cells = 12)
}
#' @export
plot.data_describe <- function(x){
x <- unclass(x)
data_type_table <- table(x$data_type_conversion['converted type'])
lbls1 <- paste(names(data_type_table), "\n", data_type_table, sep="")
df_data_type <- x$data_type_conversion %>%
group_by(`converted type`) %>% # Variable to be transformed
count() %>%
ungroup() %>%
mutate(perc = `n` / sum(`n`)) %>%
arrange(perc) %>%
mutate(labels = scales::percent(perc))
p_dtype <- ggplot2::ggplot(df_data_type, aes(x = "", y = perc, fill = `converted type`)) +
geom_col() + theme_void()+
geom_text(aes(label = labels),
position = position_stack(vjust = 0.5))+
coord_polar(theta = "y") +ggtitle("Data Types Present")+
theme(plot.title = element_text(hjust = 0.5))
counts <- c(sum(!is.na(x$grouped_missingness['Complete'])),
sum(!is.na(x$grouped_missingness['>0 to 10%'])),
sum(!is.na(x$grouped_missingness['>10 to 25%'])),
sum(!is.na(x$grouped_missingness['>25 to 50%'])),
sum(!is.na(x$grouped_missingness['>50 to 75%'])),
sum(!is.na(x$grouped_missingness['>75%'])))
category <- c('Complete', '>0 to 10%', '>10 to 25%', '>25 to 50%', '>50 to 75%', '>75%' )[]
df_missing <- data.frame(counts, category) %>%
filter(counts > 0) %>%
mutate(perc = `counts` / sum(`counts`)) %>%
arrange(perc) %>%
mutate(labels = scales::percent(perc))
p_missing <- ggplot2::ggplot(df_missing, aes(x = "", y = perc, fill = category)) +
geom_col() +
geom_text(aes(label = labels),
position = position_stack(vjust = 0.5))+
theme_void()+
coord_polar(theta = "y") +ggtitle("Missingness of data")+
theme(plot.title = element_text(hjust = 0.5))
missing_graphic <- x$data %>%
mutate(id = row_number()) %>%
gather(-id, key = "key", value = "val") %>%
mutate(isna = is.na(val)) %>%
ggplot(aes(key, id, fill = isna)) +
geom_raster(alpha=0.8) +
theme(axis.text.y = element_text(angle = 45)) +
scale_fill_manual(name = "",
values = c('steelblue', 'tomato3'),
labels = c("Present", "Missing")) +
labs(x = "Variable",
y = "Row Number", title = "Missing values in rows") +
coord_flip()
ggarrange(ggarrange(p_missing, p_dtype, ncol = 2), missing_graphic, nrow = 2)
}
plot(Data_Describe(basic_test_data))
pacman::p_load(devtools, roxygen2, testthat, knitr)
load_all()
plot(Data_Describe(basic_test_data))
load_all()
load_all()
plot(Data_Describe(basic_test_data))
basic_test_data
x <- Data_Describe(basic_test_data)
View(x)
View(x)
x$dimensions
x$memory_size
x$data_type_conversion
x$data_type_names
x$data_type_names['Integer_type']
x$data_type_names[,'Integer_type']
x$data_type_names[,'NLP_type']
complete.cases(x$data_type_names[,'NLP_type'])
x$data_type_names[,'NLP_type']
x$data_type_names[,'NLP_type'][!is.na(x$data_type_names[,'NLP_type'])]
setwd("~/University lectures/Stat432/assignment4")
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- c(2,3,4,5,6,7,8,9,10,11)
z <- c(1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1)
df <- dataframe(x,y,z)
df <- data.frame(x,y,z)
df
mean(df)
lapply(df, mean)
apply(df, mean)
apply(df, FUN = mean())
apply(x = df, FUN = mean())
?apply()
?lapply()
sapply(df, mean)
sapply(df, median)
sapply(df, median)
sapply(df, mode)
?mode
x <- c(1,2,3,4,5,6,7,8,9,10,NA)
y <- c(2,3,4,5,6,7,8,9,10,11,NA)
z <- c(1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA)
df <- data.frame(x,y,z)
sapply(df, mode)
sapply(df, mean)
sapply(df, mean, na.rm = T)
sapply(df, Mode, na.rm = T)
table(df)
sapply(df, table)
x <- c(1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11,2)
df <- data.frame(x,y,z)
x <- c(1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
df <- data.frame(x,y,z)
sapply(df, table)
lapply(df, function(x)return(max(table(x)))
lapply(df, function(x)return(max(table(x))))
lapply(df, function(x)return(which(max(table(x)))))
lapply(df, function(v)return(unique(v)[which.max(tabulate(match(v, unique(v))))]))
lapply(df, function(x)return(as.numeric(names(table(x))[table(x) == max(table(x))])))
sapply(df, max)
sapply(df, max, na.rm = T)
sapply(df, IQR, na.rm = T)
sapply(df, sd, na.rm = T)
lapply(df, function(x)return((3*(mean(x) - median(x))))/sd(x)))
lapply(df, function(x)return((3*(mean(x) - median(x)))/sd(x)))
lapply(df, function(x)return((3*(mean(x, na.rm = T) - median(x, na.rm = T)))/sd(x, na.rm = T)))
x <- c(1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
integer_data <- data.frame(x,y,z)
int_means <- sapply(integer_data, mean, na.rm = T)
int_medians <- sapply(integer_data, median, na.rm = T)
int_modes <- lapply(integer_data, function(x)return(as.numeric(names(table(x))[table(x) == max(table(x))])))
int_max <- sapply(integer_data, max, na.rm = T)
int_min <- int_max <- sapply(integer_data, min, na.rm = T)
int_IQR <- sapply(integer_data, IQR, na.rm = T)
int_SD <- sapply(integer_data, sd, na.rm = T)
#pearson second coefficient of skewness
int_skew <- lapply(integer_data, function(x)return((3*(mean(x, na.rm = T) - median(x, na.rm = T)))/sd(x, na.rm = T)))
int_output_char <- list(Means = int_means, Medians = int_medians, Modes = int_modes,
Maxs = int_max, Mins = int_min, I.Q.Rs = int_IQR, S.Ds = int_SD,
Skews = int_skew)
int_output_char
View(int_output_char)
View(int_output_char)
int_output_char$Means
int_output_char$Modes
pander(int_output_char)
library(pander)
pander(int_output_char)
knitr::opts_chunk$set(echo = TRUE)
x <- c(1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
integer_data <- data.frame(x,y,z)
int_means <- sapply(integer_data, mean, na.rm = T)
int_medians <- sapply(integer_data, median, na.rm = T)
int_modes <- lapply(integer_data, function(x)return(as.numeric(names(table(x))[table(x) == max(table(x))])))
int_max <- sapply(integer_data, max, na.rm = T)
int_min <- int_max <- sapply(integer_data, min, na.rm = T)
int_IQR <- sapply(integer_data, IQR, na.rm = T)
int_SD <- sapply(integer_data, sd, na.rm = T)
#pearson second coefficient of skewness
int_skew <- lapply(integer_data, function(x)return((3*(mean(x, na.rm = T) - median(x, na.rm = T)))/sd(x, na.rm = T)))
int_output_char <- list(Means = int_means, Medians = int_medians, Modes = int_modes,
Maxs = int_max, Mins = int_min, I.Q.Rs = int_IQR, S.Ds = int_SD,
Skews = int_skew)
pander(int_output_char)
View(int_output_char)
View(int_output_char)
#pearson second coefficient of skewness
int_skew <- unlist(lapply(integer_data, function(x)return((3*(mean(x, na.rm = T) - median(x, na.rm = T)))/sd(x, na.rm = T))))
int_skew
table(integer_data)/nrow(integer_data)
integer_data
lapply(integer_data, function(x)table(x)/nrow(x))
lapply(integer_data, function(x)return(table(x)/nrow(x)))
integer_data
table(integer_data$x)
table(integer_data$x)/nrow(integer_data$x)
nrow(integer_data$x)
integer_data$x
table(integer_data$x)/nrow(integer_data)
lapply(integer_data, function(x)return(table(x)/length(x)))
lapply(integer_data, function(x)return(names(x)[table(x)/length(x) >= 0.2]))
x <- c(1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
integer_data <- data.frame(x,y,z)
lapply(integer_data, function(x)return(names(x)[table(x)/length(x) >= 0.2]))
x <- c(1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(2,3,4,5,6,7,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
integer_data <- data.frame(x,y,z)
lapply(integer_data, function(x)return(names(x)[table(x)/length(x) >= 0.2]))
lapply(integer_data, function(x)return(names(x)[(table(x)/length(x)) >= 0.2]))
x <- c(1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(2,3,4,5,6,7,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
integer_data <- data.frame(x,y,z)
lapply(integer_data, function(x)return(names(x)[(table(x)/length(x)) >= 0.2]))
names(integer_data)
table(x)/length(x)
table(integer_data)
names(integer_data$x)
integer_data$x
integer_data$x
table(integer_data$x)
table(integer_data$x)/length(integer_data$x)
(table(integer_data$x)/length(integer_data$x)) >= 0.2
names(table(integer_data$x))
names(table(integer_data$x))[(table(integer_data$x)/length(integer_data$x)) >= 0.2])
names(table(integer_data$x))[(table(integer_data$x)/length(integer_data$x)) >= 0.2]
lapply(integer_data, function(x)return(names(table(x))[(table(x)/length(x)) >= 0.2]))
Numeric_Uni_EDA <- function(dataset,
detect = T,
numeric.force = c(),
ignore_columns = c(), #this will need to have error catching built in for inputs - look and modularising the current ones?
alternate_nas = list()){
#dataset dimensions
original_nrow <- nrow(dataset)
original_ncol <- ncol(dataset)
#detect and correct for data types, includes many error catching steps.
updated_data <- SurveyEdaPackage::data_type_detect(dataset,
numeric_force = numeric.force,
alternate_nas = alternate.nas,
preserve_nonconform = F)
#separate int data by selecting integer column and
integer_data <- updated_data$data[,updated_data$data_type_names[,'Integer_type'][!is.na(updated_data$data_type_names[,'Integer_type'])]]
double_data <- updated_data$data[,updated_data$data_type_names[,'Float_type'][!is.na(updated_data$data_type_names[,'Float_type'])]]
rm(updated_data)
#integer values
#if hunting for rcpp these can all be converted
int_means <- sapply(integer_data, mean, na.rm = T)
int_medians <- sapply(integer_data, median, na.rm = T)
int_modes <- lapply(integer_data, function(x)return(as.numeric(names(table(x))[table(x) == max(table(x))])))
int_max <- sapply(integer_data, max, na.rm = T)
int_min <- int_max <- sapply(integer_data, min, na.rm = T)
int_IQR <- sapply(integer_data, IQR, na.rm = T)
int_SD <- sapply(integer_data, sd, na.rm = T)
#pearson second coefficient of skewness
int_skew <- unlist(lapply(integer_data, function(x)return((3*(mean(x, na.rm = T) - median(x, na.rm = T)))/sd(x, na.rm = T))))
int_output_char <- list(Means = int_means, Medians = int_medians, Modes = int_modes,
Maxs = int_max, Mins = int_min, I.Q.Rs = int_IQR, S.Ds = int_SD,
Skews = int_skew)
#float values
#if hunting for rcpp these can all be converted
float_means <- sapply(double_data, mean, na.rm = T)
float_medians <- sapply(double_data, median, na.rm = T)
float_modes <- lapply(double_data, function(x)return(as.numeric(names(table(x))[table(x) == max(table(x))])))
float_max <- sapply(double_data, max, na.rm = T)
float_min <- int_max <- sapply(double_data, min, na.rm = T)
float_IQR <- sapply(double_data, IQR, na.rm = T)
float_SD <- sapply(double_data, sd, na.rm = T)
#pearson second coefficient of skewness
float_skew <- unlist(lapply(double_data, function(x)return((3*(mean(x, na.rm = T) - median(x, na.rm = T)))/sd(x, na.rm = T))))
float_output_char <- list(Means = float_means, Medians = float_medians, Modes = float_modes,
Maxs = float_max, Mins = float_min, I.Q.Rs = float_IQR, S.Ds = float_SD,
Skews = float_skew)
#start of returning rows that take up greater than 20%
gt20flag <- lapply(integer_data, function(x)return(names(table(x))[(table(x)/length(x)) >= 0.2]))
outputs <- list(Integer_Characteristics = int_output_char, FLoat_Characteristics= float_output_char,
Interger_Data = integer_data, Double_Data = double_data, GT_20_Flag = gt20flag)
class(outputs) <- 'Numeric_EDA'
}
Numeric_Uni_EDA(integer_data)
rm(Numeric_Uni_EDA())
rm('Numeric_Uni_EDA')
pacman::p_load(devtools, testthat, roxygen2, knitr)
load_all()
Numeric_Uni_EDA(integer_data)
load_all()
Numeric_Uni_EDA(integer_data)
load_all()
Numeric_Uni_EDA(integer_data)
out <- Numeric_Uni_EDA(integer_data)
View(out)
View(out)
load_all()
pacman::p_load(devtools, roxygen2, knitr, testthat)
load_all()
load_all()
x <- c(1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(2,3,4,5,6,7,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
integer_data <- data.frame(x,y,z)
out <- Numeric_Uni_EDA(integer_data)
View(out)
View(out)
load_all()
out <- Numeric_Uni_EDA(integer_data)
load_all()
out <- Numeric_Uni_EDA(integer_data)
y <- data_type_detect(integer_data)
View(y)
load_all()
out <- Numeric_Uni_EDA(integer_data)
load_all()
out <- Numeric_Uni_EDA(integer_data)
View(out)
load_all()
out <- Numeric_Uni_EDA(integer_data)
x <- c(1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,NA,12)
x
integer_data[,'x']
data.frame(integer_data[,'x'])
integer_data[[,'x']]
integer_data[,'x']
integer_data$x
data.frame(integer_data[,'x'])
integer_data %>% filter(x)
integer_data %>% select(x)
?select
load_all()
out <- Numeric_Uni_EDA(integer_data)
View(out)
load_all()
out <- Numeric_Uni_EDA(integer_data)
View(out)
View(out)
load_all()
out <- Numeric_Uni_EDA(integer_data)
View(out)
?report
??report
View(out)
x <- c(1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(2,3,4,5,6,7,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
integer_data <- data.frame(x,y,z)
integer_data$x
names(integer_data$x)
out
out %>% select(Integer_Data)
unclass(out) %>% select(Integer_Data)
integer_data
data.frame(integer_data)
out$Double_Data
names(out$Double_Data)
load_all()
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
build()
document()
load_all()
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
pander(out$GT_20_Flag)
pander(data.frame(out$GT_20_Flag))
data.frame(out$GT_20_Flag)
sapply(out$GT_20_Flag, length)
max(sapply(out$GT_20_Flag, length))
y <- max(sapply(out$GT_20_Flag, length))
lapply(high_repeat, function(x){
length(x) <- y
return(x)
})
y <- max(sapply(out$GT_20_Flag, length))
high_repeat <- out$GT_20_Flag
lapply(high_repeat, function(x){
length(x) <- y
return(x)
})
data.frame(lapply(high_repeat, function(x){
length(x) <- y
return(x)
}))
rbind(lapply(high_repeat, function(x){
length(x) <- y
return(x)
}))
cbind(lapply(high_repeat, function(x){
length(x) <- y
return(x)
}))
pander(cbind(lapply(high_repeat, function(x){
length(x) <- y
return(x)
})))
load_all()
print(Numeric_Uni_EDA(integer_data))
y <- max(sapply(out$GT_20_Flag, length))
out$GT_20_Flag
load_all()
print(Numeric_Uni_EDA(integer_data))
y <- max(sapply(unclass(out)$GT_20_Flag, length))
y
load_all()
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
build()
document()
load_all()
print(Numeric_Uni_EDA(integer_data))
View(out)
out <- Numeric_Uni_EDA(integer_data)
View(out)
load_all()
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
print(Numeric_Uni_EDA(basic_test_data))
load_all()
print(Numeric_Uni_EDA(basic_test_data))
x <- c(1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,NA,12)
x
x <- c(1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(2,3,4,5,6,7,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
integer_data <- data.frame(x,y,z)
integer_data
integer_data <- rbind(x,y,z)
integer_data
integer_data[,1]
integer_data[,1] <- ifelse(output_2[,1] == "", '_*NONE*_',  output_2[,1])
integer_data[,1] <- ifelse(integer_data[,1] == "", '_*NONE*_',  integer_data[,1])
integer_data
x <- c("",1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(2,3,4,5,6,7,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
integer_data <- rbind(x,y,z)
integer_data[,1] <- ifelse(integer_data[,1] == "", '_*NONE*_',  integer_data[,1])
integer_data
load_all()
print(Numeric_Uni_EDA(basic_test_data))
build()
document()
load_all()
print(Numeric_Uni_EDA(basic_test_data))
load_all()
print(Numeric_Uni_EDA(basic_test_data))
load_all()
print(Numeric_Uni_EDA(basic_test_data))
load_all()
print(Numeric_Uni_EDA(basic_test_data))
x <- character(0)
y <- character(0)
z <- character(0)
dt <- rbind(x,y,z)
dt
dt[,1]
dt <- cbind(x,y,z)
dt
load_all()
print(Numeric_Uni_EDA(basic_test_data))
load_all()
print(Numeric_Uni_EDA(basic_test_data))
load_all()
print(Numeric_Uni_EDA(basic_test_data))
load_all()
print(Numeric_Uni_EDA(basic_test_data))
load_all()
load_all()
print(Numeric_Uni_EDA(basic_test_data))
x <- c("",1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(2,3,4,5,6,7,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
integer_data <- rbind(x,y,z)
print(Numeric_Uni_EDA(integer_data))
integer_data
integer_data <- data.frame(x,y,z)
integer_data <- data.frame(x,y,z)
print(Numeric_Uni_EDA(integer_data))
x <- c(1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,NA,12)
y <- c(2,3,4,5,6,7,2,3,4,5,6,7,8,9,10,11,NA,11)
z <- c(2,3,4,5,6,7,1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.1,NA,11)
integer_data <- data.frame(x,y,z)
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
load_all()
print(Numeric_Uni_EDA(integer_data))
print(Numeric_Uni_EDA(basic_test_data))
load_all()
print(Numeric_Uni_EDA(basic_test_data))
print(Numeric_Uni_EDA(integer_data))
