labs(title="Bigram Frequency (top 10)",x="Count", y = "Bigram")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
input_data <- head(x$Trigrams, n=10) %>%
mutate(Trigram = paste(word1, word2, word3)) %>%
select(Trigram, n)
Trigram_frequency <- ggplot(input_data, aes(x = n, y = factor(Trigram, levels = rev(Trigram)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Trigram Frequency (top 10)",x="Count", y = "Trigram")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
corrolation_plot <- x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
ggarrange(ggarrange(sentiment_summary, word_frequency, ncol = 2),
ggarrange(Bigram_frequency, Trigram_frequency, ncol =2),
corrolation_plot,
nrow = 3)
x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name, sizes = 0.5), repel = TRUE) +
theme_void()
x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name, size = 0.5), repel = TRUE) +
theme_void()
x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name, size = 0.1), repel = TRUE) +
theme_void()
x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name, label.size = 0.1), repel = TRUE) +
theme_void()
x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name, size = 5), repel = TRUE) +
theme_void()
x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name, size = 100), repel = TRUE) +
theme_void()
x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name, size = 0.1), repel = TRUE) +
theme_void()
emotions <- c('anger', 'anticipation', 'disgust', 'fear', 'joy', 'sadness', 'surprise', 'trust', 'negative', 'positive')
sentiment_counts <- sapply(x$Sentiments, sum)
plot_frame <- data.frame(Emotions = emotions, Sentiment_Score = sentiment_counts)
sentiment_summary <- ggplot(plot_frame, aes(x = factor(Emotions, levels = Emotions), y = Sentiment_Score , fill=Sentiment_Score)) +
geom_bar(stat = "identity", color="black")+theme_minimal() +
labs(title="Cumulate Sentiment Score",x="Emotion", y = "Cumulative Score")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust=1)) +scale_fill_distiller(palette = "Greens")
input_data <- head(x$Word_Frequency, n=10)
word_frequency <- ggplot(input_data, aes(x = n, y = factor(word1, levels = rev(word1)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Word Frequency (top 10)",x="Count", y = "Word")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
input_data <- head(x$Bigrams, n=10) %>%
mutate(Bigram = paste(word1, word2)) %>%
select(Bigram, n)
Bigram_frequency <- ggplot(input_data, aes(x = n, y = factor(Bigram, levels = rev(Bigram)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Bigram Frequency (top 10)",x="Count", y = "Bigram")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
input_data <- head(x$Trigrams, n=10) %>%
mutate(Trigram = paste(word1, word2, word3)) %>%
select(Trigram, n)
Trigram_frequency <- ggplot(input_data, aes(x = n, y = factor(Trigram, levels = rev(Trigram)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Trigram Frequency (top 10)",x="Count", y = "Trigram")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
corrolation_plot <- x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
ggarrange(ggarrange(sentiment_summary, word_frequency, ncol = 2),
ggarrange(Bigram_frequency, Trigram_frequency, ncol =2),
corrolation_plot,
nrow = 3)
emotions <- c('anger', 'anticipation', 'disgust', 'fear', 'joy', 'sadness', 'surprise', 'trust', 'negative', 'positive')
sentiment_counts <- sapply(x$Sentiments, sum)
plot_frame <- data.frame(Emotions = emotions, Sentiment_Score = sentiment_counts)
sentiment_summary <- ggplot(plot_frame, aes(x = factor(Emotions, levels = Emotions), y = Sentiment_Score , fill=Sentiment_Score)) +
geom_bar(stat = "identity", color="black")+theme_minimal() +
labs(title="Cumulate Sentiment Score",x="Emotion", y = "Cumulative Score")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust=1)) +scale_fill_distiller(palette = "Greens")
input_data <- head(x$Word_Frequency, n=10)
word_frequency <- ggplot(input_data, aes(x = n, y = factor(word1, levels = rev(word1)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Word Frequency (top 10)",x="Count", y = "Word")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
input_data <- head(x$Bigrams, n=10) %>%
mutate(Bigram = paste(word1, word2)) %>%
select(Bigram, n)
Bigram_frequency <- ggplot(input_data, aes(x = n, y = factor(Bigram, levels = rev(Bigram)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Bigram Frequency (top 10)",x="Count", y = "Bigram")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
input_data <- head(x$Trigrams, n=10) %>%
mutate(Trigram = paste(word1, word2, word3)) %>%
select(Trigram, n)
Trigram_frequency <- ggplot(input_data, aes(x = n, y = factor(Trigram, levels = rev(Trigram)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Trigram Frequency (top 10)",x="Count", y = "Trigram")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
corrolation_plot <- x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
ggarrange(ggarrange(sentiment_summary, word_frequency, ncol = 2),
ggarrange(Bigram_frequency, Trigram_frequency, ncol =2),
nrow = 2)
ggarrange(corrolation_plot, nrow = 1)
cor_cut <- 0.2
emotions <- c('anger', 'anticipation', 'disgust', 'fear', 'joy', 'sadness', 'surprise', 'trust', 'negative', 'positive')
sentiment_counts <- sapply(x$Sentiments, sum)
plot_frame <- data.frame(Emotions = emotions, Sentiment_Score = sentiment_counts)
sentiment_summary <- ggplot(plot_frame, aes(x = factor(Emotions, levels = Emotions), y = Sentiment_Score , fill=Sentiment_Score)) +
geom_bar(stat = "identity", color="black")+theme_minimal() +
labs(title="Cumulate Sentiment Score",x="Emotion", y = "Cumulative Score")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust=1)) +scale_fill_distiller(palette = "Greens")
input_data <- head(x$Word_Frequency, n=10)
word_frequency <- ggplot(input_data, aes(x = n, y = factor(word1, levels = rev(word1)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Word Frequency (top 10)",x="Count", y = "Word")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
input_data <- head(x$Bigrams, n=10) %>%
mutate(Bigram = paste(word1, word2)) %>%
select(Bigram, n)
Bigram_frequency <- ggplot(input_data, aes(x = n, y = factor(Bigram, levels = rev(Bigram)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Bigram Frequency (top 10)",x="Count", y = "Bigram")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
input_data <- head(x$Trigrams, n=10) %>%
mutate(Trigram = paste(word1, word2, word3)) %>%
select(Trigram, n)
Trigram_frequency <- ggplot(input_data, aes(x = n, y = factor(Trigram, levels = rev(Trigram)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Trigram Frequency (top 10)",x="Count", y = "Trigram")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
corrolation_plot <- x$Corr_matrix %>%
filter(correlation > .2) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()+
labs(title=paste("Corrolation clusters >",cor_cut, sep =""))+ theme(legend.position="none")
ggarrange(ggarrange(sentiment_summary, word_frequency, ncol = 2),
ggarrange(Bigram_frequency, Trigram_frequency, ncol =2),
nrow = 2)
ggarrange(corrolation_plot, nrow = 1)
pacmann::p_load(devtools, roxygen2, testthat, knitr)
pacman::p_load(devtools, roxygen2, testthat, knitr)
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage/R")
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
load_all()
build()
library.install('Syuzhet')
install.packages('Syuzhet')
install.packages('syuzhet')
build()
build()
build()
document()
load_all()
load_all()
setwd("~/University lectures/Data501/Project_Folder/data_temp")
datain <- read.csv('text_survey.csv')
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
NLP_Uni_EDA(datain)
NLP_Data <- NLP_Uni_EDA(datain)
View(NLP_Data)
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500))
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500, alternate.nas = list(c('course_rating', ""))))
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500, alternate.nas = list(c('course_rating', " "))))
table(NLP_Data$`course_rating _other`)
unique(NLP_Data$`course_rating _other`)
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500, alternate.nas = list(c('course_rating', ""))))
unique(NLP_Data$`course_rating _other`)
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500, ignore.columns = c('course_rating')))
View(NLP_Data)
View(NLP_Data)
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500, ignore.columns = c('course_rating')))
rm(NLP_Data)
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500, ignore.columns = c('course_rating')))
View(NLP_Data)
names(NLP_Data)
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500, ignore.columns = c('course_rating')))
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500, ignore.columns = c('course_rating')))
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500), ignore.columns = c('course_rating'))
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500), alternate.nas =  =list(c('course_rating', "")))
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500), alternate.nas=list(c('course_rating', "")))
load_all()
View(NLP_Data)
NLP_Data <- NLP_Uni_EDA(head(datain, n = 1000), alternate.nas=list(c('course_rating', "")))
View(NLP_Data)
View(datain)
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500), alternate.nas=list(c('course_rating', "")), NLP_force = c('course_title'))
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500), alternate.nas=list(c('course_rating', "")), NLP.force = c('course_title'))
View(NLP_Data)
NLP_Column_Analysis(NLP_Data$reviews, 'Reviews')
out <- NLP_Column_Analysis(NLP_Data$reviews, 'Reviews')
plot(out)
load_all()
build()
document()
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
out <- NLP_Column_Analysis(NLP_Data$reviews, 'Reviews')
plot(out)
load_all()
plot(out)
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(devtools, roxygen2, knitr, testthat)
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
load_all()
setwd("~/University lectures/Data501/Project_Folder/data_temp")
pacman::p_load(devtools, roxygen2, knitr, testthat)
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
load_all()
setwd("~/University lectures/Data501/Project_Folder/data_temp")
datain <- read.csv('text_survey.csv')
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
out <- NLP_Column_Analysis(NLP_Data$reviews, 'Reviews')
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
out <- NLP_Column_Analysis(NLP_Data$reviews, 'Reviews')
plot(out)
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
out <- NLP_Column_Analysis(NLP_Data$reviews, 'Reviews')
plot(out)
plot(out)
plot(out)
load_all()
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
load_all()
pacman::p_load(devtools, roxygen2, knitr, testthat)
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
load_all()
setwd("~/University lectures/Data501/Project_Folder/data_temp")
datain <- read.csv('text_survey.csv')
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
out <- NLP_Column_Analysis(NLP_Data$reviews, 'Reviews')
plot(out)
pacman::p_load(devtools, roxygen2, knitr, testthat)
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
load_all()
setwd("~/University lectures/Data501/Project_Folder/data_temp")
datain <- read.csv('text_survey.csv')
z <- list(c(), c(), c())
length(z)
names(z) <- c('hello', 'my', 'name')
z
z <- list()
length(z) <- 3
z
names(z) <- c('hello', 'my', 'name')
z
z <- list(c(), c(), c())
length(z)
names(z) <- c('hello', 'my', 'name')
class(z) <- 'hello'
j <- list(z, z)
class(j) <- 'hheelloo'
z <- list(c(), c(), c())
length(z)
names(z) <- c('hello', 'my', 'name')
class(z) <- 'hello'
j <- list(z, z)
class(j) <- 'hheelloo'
class(j)
class(j[1])
class(j[[1]])
j
j[1]
load_all()
build()
document()
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
View(NLP_Data)
NLP_Column_Analysis(NLP_Data$reviews)
NLP_Column_Analysis(NLP_Data$reviews, 'reviews')
NLP_Column_Analysis(NLP_Data$reviews, c('reviews'))
NLP_Column_Analysis(NLP_Data$reviews)
NLP_Column_Analysis(NLP_Data$reviews, 'reviews')
NLP_Data$reviews
View(NLP_Data)
NLP_Column_Analysis(head(datain$reviews, n=500), 'reviews')
load_all()
out <- NLP_Column_Analysis(head(datain$reviews, n=500), 'reviews')
View(out)
x <- list()
length(x)<- 2
names(x) <- c('hello', 'tree')
x
x[1]<- out
update(x, out)
x <- list()
length(x)<- 2
names(x) <- c('hello', 'tree')
x[[1]]<- out
x
View(x)
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
class(NLP_Data)
class(NLP_Data[[1]])
class(unclass(NLP_Data)[[1]])
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
plot(NLP_Data)
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
plot(NLP_Data)
plot(NLP_Data[[1]])
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
plot(NLP_Data[[1]])
plot(NLP_Data)
build()
build()
document()
build()
load_all()
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
plot(NLP_Data)
load_all()
plot(NLP_Data)
load_all()
plot(NLP_Data)
build()
document()
names(NLP_Data)
build()
document()
load_all()
print(NLP_Data)
pacman::p_load(devtools, roxygen2, knitr, testthat)
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
load_all()
setwd("~/University lectures/Data501/Project_Folder/data_temp")
datain <- read.csv('text_survey.csv')
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
build()
document()
load_all()
print(NLP_Data)
print(NLP_Data)
print(NLP_Data)
print(NLP_Data)
load_all()
print(NLP_Data)
plot(NLP_Data)
plot(NLP_Data)
plot(NLP_Data[[2]])
load_all()
plot(NLP_Data[[2]])
pacman::p_load(devtools, roxygen2, testthat, knitr)
setwd("~/University lectures/Data501/Project_Folder/data_temp")
datain <- read.csv('text_survey.csv')
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
load_all()
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(devtools, roxygen2, knitr, testthat)
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
load_all()
setwd("~/University lectures/Data501/Project_Folder/data_temp")
datain <- read.csv('text_survey.csv')
NLP_Data <- NLP_Uni_EDA(head(datain, n = 500),
alternate.nas=list(c('course_rating', "")),
NLP.force = c('course_title'))
print(NLP_Data)
plot(NLP_Data)
load_all()
plot(NLP_Data)
plot(NLP_Data)
plot(NLP_Data)
load_all()
plot(NLP_Data)
plot(NLP_Data)
plot(NLP_Data)
plot(NLP_Data)
load_all()
load_all()
plot(NLP_Data)
plot(NLP_Data)
plot(NLP_Data)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(devtools, roxygen2, knitr, testthat)
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
load_all()
setwd("~/University lectures/Data501/Project_Folder/data_temp")
datain <- read.csv('text_survey.csv')
