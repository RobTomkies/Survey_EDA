}
return out;
}
')
cppFunction('
NumericVector RCPPColMedian(NumericMatrix x) {
NumericMatrix y = clone(x);
int nrow = y.nrow();
int ncol = y.ncol();
NumericVector out(ncol);
for (int i = 0; i < ncol; i++) {
NumericVector col = y( _ , i );
NumericVector table = table(col);
print(col);
}
return out;
}
')
load_all()
build()
load_all()
Numeric_Uni_EDA(basic_test_data)
x <- Numeric_Uni_EDA(basic_test_data)
x$Integer_Characteristics
test()
load_all()
build()
document()
x <- Data_Describe(basic_test_data)
plot(x)
x <- NLP_Uni_EDA(basic_test_data)
plot(x)
plot(x)
load_all()
plot(x)
plot(x, cor_cut = 0.01)
library(SurveyEdaPackage)
x <- Data_Describe(basic_test_data)
print(x)
plot(x)
library(SurveyEdaPackage)
x <- Data_Describe(basic_test_data)
print(x)
plot(x)
build_vignettes()
data_type_detect(basic_test_data)
summary(data_type_detect(basic_test_data))
generic_characteristics <- Data_Describe(basic_test_data)
print(generic_characteristics)
plot(generic_characteristics)
build_vignettes()
build_vignettes()
generic_characteristics <- Data_Describe(basic_test_data)
print(generic_characteristics)
plot(generic_characteristics)
build_vignettes()
x <- Numeric_Uni_EDA(basic_test_data)
print(x)
summary(x)
plot(x)
x <- Numeric_Uni_EDA(basic_test_data)
print(x)
summary(x)
plot(x)
build_vignettes()
x <- Numeric_Uni_EDA(basic_test_data)
print(x)
summary(x)
plot(x)
load_all()
x <- Numeric_Uni_EDA(basic_test_data)
print(x)
summary(x)
plot(x)
build_vignettes()
load_all()
x <- Numeric_Uni_EDA(basic_test_data)
print(x)
summary(x)
load_all()
load_all()
x <- Numeric_Uni_EDA(basic_test_data)
summary(x)
build_vignettes(())
build_vignettes()
x <- Numeric_Uni_EDA(basic_test_data)
# print(x)
# summary(x)
# plot(x)
build_vignettes()
load_all()
x <- Numeric_Uni_EDA(basic_test_data)
plot(x)
summary(x)
x <- Numeric_Uni_EDA(basic_test_data)
print(x)
summary(x)
plot(x)
build_vignettes()
build()
pacman::p_load(devtools, roxygen2, testthat, knitr)
load_all()
build()
load_all()
Numeric_Uni_EDA(basic_test_data)
build()
load_all()
document()
build()
build_vignettes()
build_vignettes()
library(SurveyEdaPackage)
x <- Numeric_Uni_EDA(basic_test_data)
build_vignettes()
build()
build_vignettes()
load_all()
build()
build_vignettes()
load_all()
build()
build_vignettes()
generic_characteristics <- Data_Describe(basic_test_data)
print(generic_characteristics)
plot(generic_characteristics)
load_all()
build()
build_vignettes()
load_all()
build()
build_vignettes()
x <- NLP_Column_Analysis(basic_test_data$reviews, 'Reviews')
load_all()
build()
build()
build_vignettes()
load_all()
build_vignettes()
#' @param x NLP_Column_Analysis s3 object
#' @param cor_cut The corrolation score to cut off for connections when plotting - default set to 0.2
#'
#' @return Barplots for sentiment scores, word frequency, bigrams and Trigrams as well as a graph map displaying clusters of corrolated words
#'
#' @examples
#' x <- NLP_Column_Analysis(basic_test_data$words)
#' plot(x)
#'
#' @export
plot.NLP_Column_Analysis <- function(x, cor_cut = 0.2){
x <- unclass(x)
emotions <- c('anger', 'anticipation', 'disgust', 'fear', 'joy', 'sadness', 'surprise', 'trust', 'negative', 'positive')
sentiment_counts <- sapply(x$Sentiments, sum)
plot_frame <- data.frame(Emotions = emotions, Sentiment_Score = sentiment_counts)
sentiment_summary <- ggplot(plot_frame, aes(x = factor(Emotions, levels = Emotions), y = Sentiment_Score , fill=Sentiment_Score)) +
geom_bar(stat = "identity", color="black")+theme_minimal() +
labs(title="Cumulate Sentiment Score",x="Emotion", y = "Cumulative Score")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust=1)) +scale_fill_distiller(palette = "Greens")
input_data <- head(x$Word_Frequency, n=10)
word_frequency <- ggplot(input_data, aes(x = n, y = factor(word1, levels = rev(word1)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Word Frequency (top 10)",x="Count", y = "Word")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
input_data <- head(x$Bigrams, n=10) %>%
mutate(Bigram = paste(word1, word2)) %>%
select(Bigram, n)
Bigram_frequency <- ggplot(input_data, aes(x = n, y = factor(Bigram, levels = rev(Bigram)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Bigram Frequency (top 10)",x="Count", y = "Bigram")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
input_data <- head(x$Trigrams, n=10) %>%
mutate(Trigram = paste(word1, word2, word3)) %>%
select(Trigram, n)
Trigram_frequency <- ggplot(input_data, aes(x = n, y = factor(Trigram, levels = rev(Trigram)),fill=n)) +
geom_bar(stat = "identity", color="black")+
theme_minimal()+
scale_fill_distiller(palette = "Greens")+
labs(title="Trigram Frequency (top 10)",x="Count", y = "Trigram")+ theme(legend.position="none")+
theme(axis.text.y = element_text(angle = 45, vjust=-1))
suppressWarnings(if(is.na(x$Corr_matrix)){
corrolation_plot <- ggplot() + theme_void()
}
else{
corrolation_plot <- x$Corr_matrix %>%
filter(correlation > cor_cut) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(show.legend = FALSE) +
geom_node_point(color = "lightgreen", size = 5) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()+
labs(title=paste("Corrolation clusters >",cor_cut, sep =""))+ theme(legend.position="none")
})
graphics <- ggarrange(ggarrange(sentiment_summary, word_frequency, ncol = 2),
ggarrange(Bigram_frequency, Trigram_frequency, ncol =2),
ggarrange(corrolation_plot, ncol = 1),
heights = c(1,1,2),
nrow = 3)
annotate_figure(graphics, top = text_grob(as.character(x$input_name),
color = "black", face = "bold", size = 15))
}
#'
#' @export
#'
#' @examples
#'
#' NLP_Column_Analysis('Column1', 'Question_2')
#'
#' plot(NLP_Column_Analysis(c(1), 'Question_2'))
#' print(NLP_Column_Analysis(c(1), 'Question_2'))
#'
NLP_Column_Analysis <- function(column_in, input_name){
if(typeof(input_name)!= 'character'){stop('column name must be a string')}
if(!(is.vector(column_in) & !is.list(column_in))){stop('Input data must be a vector of strings, one row for each response')}
## Tidy Format##
#convert to tidy format
working_data <- convert_tidy(column_in)
#word frequency
Word_Frequency <- NLP_ngram(working_data, 1)
#Bigrams
Bigrams <- NLP_ngram(working_data, 2)
#Trigrams
Trigrams <- NLP_ngram(working_data, 3)
#word corrolations
Corr_matrix <- EDA_Word_cor_score(working_data)
#tfidf
tf_idf <- tfidf_score(working_data)
##Non Tidy Format##
#wordcount
wordcount <- reponse_word_count(column_in)
#Sentiment analysis
sentiments <- get_nrc_sentiment(column_in)
names(sentiments) <- paste(input_name,"_",names(sentiments), sep = "")
output <- list(Word_Frequency = Word_Frequency, Bigrams =Bigrams,
Trigrams = Trigrams, Corr_matrix = Corr_matrix,
Tf_idf = tf_idf, Wordcount = wordcount,
Sentiments = sentiments, input_name = input_name)
class(output) <- 'NLP_Column_Analysis'
return(output)
}
NLP_Column_Analysis(basic_test_data$reviews, 'Reviews')
rlang::last_error()
load_all()
rm(NLP_Column_Analysis())
rm(NLP_Column_Analysis
)
rm(plot.NLP_Column_Analysis
)
load_all()
NLP_Column_Analysis(basic_test_data$reviews, 'Reviews')
x <- NLP_Column_Analysis(basic_test_data$reviews, 'Reviews')
load_all()
x <- NLP_Column_Analysis(basic_test_data$reviews, 'Reviews')
load_all()
x <- NLP_Column_Analysis(basic_test_data$reviews, 'Reviews')
load_all()
x <- NLP_Column_Analysis(basic_test_data$reviews, 'Reviews')
load_all()
build_vignettes()
build_vignettes()
build_vignettes()
setwd("~/University lectures/Data501/Project_Folder/data_temp")
reviews <- read.csv('text_survey.csv') %>% head(n=1000) %>% select(reviews)
setwd("~/University lectures/Data501/Project_Folder/Survey_EDA/SurveyEdaPackage")
natural_language_column <- data.frame(reviews)
use_data(natural_language_column)
build()
document()
build_vignettes()
build_vignettes()
build_vignettes()
load_all()
document()
build()
View(natural_language_column)
load_all()
build_vignettes()
load_all()
build_vignettes()
?Data_Describe
?data_type_detect
?Data_Describe
document()
build_vignettes()
?Numeric_uni_EDA
?Categorical_Uni_EDA
load_all()
build()
gc()
pacman::p_load(devtools, roxygen2, testthat, knitr)
load_all()
build()
test()
x <- suppressWarnings(NLP_Column_Analysis(basic_test_data$reviews, 'Reviews'))
set.seed(0)
x <- suppressWarnings(NLP_Column_Analysis(basic_test_data$reviews, 'Reviews'))
x$Corr_matrix$correlation[1]
x$Corr_matrix$item1[1]
x$Corr_matrix$item2[1]
x$Trigrams$word1[1]
(x$Trigrams$word2[1]
x$Tf_idf$response[1]
x$Tf_idf$tf_idf[1]
x$Tf_idf$word[1]
test_that("Key Values are correct",{
set.seed(0)
x <- suppressWarnings(NLP_Column_Analysis(basic_test_data$reviews, 'Reviews'))
expect_equal(x$Word_Frequency$n[1], 77)
expect_identical(x$Word_Frequency$word1[1], 'assignments')
expect_equal(x$Bigrams$n[1], 19)
expect_identical(x$Bigrams$word1[1], 'office')
expect_identical(x$Bigrams$word2[1], 'hours')
expect_equal(x$Trigrams$n[1], 4)
expect_identical(x$Trigrams$word1[1], 'future')
expect_identical(x$Trigrams$word2[1], 'math')
expect_identical(x$Trigrams$word3[1], 'courses')
expect_true(LRE(x$Corr_matrix$correlation[1], 0.8039289)>5)
expect_identical(x$Corr_matrix$item1[1], 'hours')
expect_identical(x$Corr_matrix$item2[1], 'office')
expect_equal(x$Tf_idf$response[1], 40)
expect_true(LRE(x$Tf_idf$tf_idf[1], 5.298317)>5)
expect_identical(x$Tf_idf$word[1], 'gg')
expect_length(x$Wordcount, 200)
expect_equal(x$Wordcount[1], 6)
expect_equal( x$Sentiments$Reviews_anger[2], 2)
expect_equal( x$Sentiments$Reviews_trust[7], 7)
expect_identical(x$input_name, "Reviews")
})
x$Word_Frequency$n[1]
x$Word_Frequency$word1[1]
x$Bigrams$n[1]
x$Bigrams$word1[1]
x$Bigrams$word2[1]
x$Trigrams$n[1]
x$Trigrams$word1[1]
x$Trigrams$word2[1]
x$Trigrams$word3[1]
x$Corr_matrix$correlation[1]
LRE(x$Corr_matrix$correlation[1], 0.8039289)
LRE <- function(x,c){
if(c==0){return(round(-log(abs(x), base = 10)))}
else{return(round(-log((abs(x-c)/abs(c)) , base = 10)))}
}
test_that("Key Values are correct",{
set.seed(0)
x <- suppressWarnings(NLP_Column_Analysis(basic_test_data$reviews, 'Reviews'))
expect_equal(x$Word_Frequency$n[1], 77)
expect_identical(x$Word_Frequency$word1[1], 'assignments')
expect_equal(x$Bigrams$n[1], 19)
expect_identical(x$Bigrams$word1[1], 'office')
expect_identical(x$Bigrams$word2[1], 'hours')
expect_equal(x$Trigrams$n[1], 4)
expect_identical(x$Trigrams$word1[1], 'future')
expect_identical(x$Trigrams$word2[1], 'math')
expect_identical(x$Trigrams$word3[1], 'courses')
expect_true(LRE(x$Corr_matrix$correlation[1], 0.8039289)>5)
expect_identical(x$Corr_matrix$item1[1], 'hours')
expect_identical(x$Corr_matrix$item2[1], 'office')
expect_equal(x$Tf_idf$response[1], 40)
expect_true(LRE(x$Tf_idf$tf_idf[1], 5.298317)>5)
expect_identical(x$Tf_idf$word[1], 'gg')
expect_length(x$Wordcount, 200)
expect_equal(x$Wordcount[1], 6)
expect_equal( x$Sentiments$Reviews_anger[2], 2)
expect_equal( x$Sentiments$Reviews_trust[7], 7)
expect_identical(x$input_name, "Reviews")
})
load_all()
test()
#logrelative error
LRE <- function(x,c){
if(c==0){return(round(-log(abs(x), base = 10)))}
else{return(round(-log((abs(x-c)/abs(c)) , base = 10)))}
}
test_that("Input Warnings are correct unique to function",{
expect_error(Numeric_Uni_EDA(basic_test_data, ignore.columns = c(names(basic_test_data))),'No numeric data either detected or forced, please correct')
})
test_that("Output data structures are correct types",{
x <- Numeric_Uni_EDA(basic_test_data)
expect_equal(length(names(x)), 5)
expect_equal(is.list(x$Integer_Characteristics), T)
expect_equal(is.list(x$Float_Characteristics), T)
expect_equal(is.list(x$GT_20pcnt_Flag), T)
expect_equal(is.data.frame(x$Interger_Data), T)
expect_equal(is.data.frame(x$Double_Data), T)
})
test_that("Check Integer key outputs are correct",{
x <- Numeric_Uni_EDA(basic_test_data)
expect_true(LRE(x$Integer_Characteristics$Means[1], 48.7400) > 5)
expect_true(LRE(x$Integer_Characteristics$Means[2], 107.4450) > 5)
expect_true(LRE(x$Integer_Characteristics$Means[3], 398.1800) > 5)
expect_true(LRE(x$Integer_Characteristics$Means[4], 395.6023) > 5)
expect_true(LRE(x$Integer_Characteristics$Medians[1], 45.0 ) > 5)
expect_true(LRE(x$Integer_Characteristics$Medians[2], 112.0) > 5)
expect_true(LRE(x$Integer_Characteristics$Medians[3], 422.5) > 5)
expect_true(LRE(x$Integer_Characteristics$Medians[4], 413.5 ) > 5)
expect_true(LRE(x$Integer_Characteristics$Maxs[1], 100 ) > 5)
expect_true(LRE(x$Integer_Characteristics$Maxs[2], 200) > 5)
expect_true(LRE(x$Integer_Characteristics$Maxs[3], 800) > 5)
expect_true(LRE(x$Integer_Characteristics$Maxs[4], 800 ) > 5)
expect_true(LRE(x$Integer_Characteristics$Mins[1], 2 ) > 5)
expect_true(LRE(x$Integer_Characteristics$Mins[2], 1) > 5)
expect_true(LRE(x$Integer_Characteristics$Mins[3], 12) > 5)
expect_true(LRE(x$Integer_Characteristics$Mins[4], 14 ) > 5)
expect_true(LRE(x$Integer_Characteristics$I.Q.Rs[1], 45.0 ) > 5)
expect_true(LRE(x$Integer_Characteristics$I.Q.Rs[2], 117.50) > 5)
expect_true(LRE(x$Integer_Characteristics$I.Q.Rs[3], 396.25) > 5)
expect_true(LRE(x$Integer_Characteristics$I.Q.Rs[4], 394.75 ) > 5)
expect_true(LRE(x$Integer_Characteristics$S.Ds[1], 26.55595 ) > 5)
expect_true(LRE(x$Integer_Characteristics$S.Ds[2], 62.89456) > 5)
expect_true(LRE(x$Integer_Characteristics$S.Ds[3], 230.32544) > 5)
expect_true(LRE(x$Integer_Characteristics$S.Ds[4], 229.73637 ) > 5)
expect_true(LRE(x$Integer_Characteristics$Skews[1], 0.4225042 ) > 5)
expect_true(LRE(x$Integer_Characteristics$Skews[2], -0.2172684) > 5)
expect_true(LRE(x$Integer_Characteristics$Skews[3], -0.3167692) > 5)
expect_true(LRE(x$Integer_Characteristics$Skews[4], -0.2337165) > 5)
expect_identical(x$Integer_Characteristics$Modes$x, c(22.))
expect_identical(x$Integer_Characteristics$Modes$y, c(195.))
expect_identical(x$Integer_Characteristics$Modes$actual_int, c(457., 672, 800))
expect_identical(x$Integer_Characteristics$Modes$ints_with_na, c(672,800.))
})
test_that("Check float type key outputs are correct",{
x <- Numeric_Uni_EDA(basic_test_data)
expect_true(LRE(x$Float_Characteristics$Means[1], 48.11823) > 5)
expect_true(LRE(x$Float_Characteristics$Means[2], 48.51815) > 5)
expect_true(LRE(x$Float_Characteristics$Medians[1], 46.15422  ) > 5)
expect_true(LRE(x$Float_Characteristics$Medians[2], 46.26620 ) > 5)
expect_true(LRE(x$Float_Characteristics$Maxs[1], 98.49511 ) > 5)
expect_true(LRE(x$Float_Characteristics$Maxs[2], 98.49511) > 5)
expect_true(LRE(x$Float_Characteristics$Mins[1], 0.1947149  ) > 5)
expect_true(LRE(x$Float_Characteristics$Mins[2], 0.1947149 ) > 5)
expect_true(LRE(x$Float_Characteristics$I.Q.Rs[1], 48.63634  ) > 5)
expect_true(LRE(x$Float_Characteristics$I.Q.Rs[2], 50.45301 ) > 5)
expect_true(LRE(x$Float_Characteristics$S.Ds[1],  28.07992 ) > 5)
expect_true(LRE(x$Float_Characteristics$S.Ds[2], 28.18401) > 5)
expect_true(LRE(x$Float_Characteristics$Skews[1], 0.2098306) > 5)
expect_true(LRE(x$Float_Characteristics$Skews[2], 0.2397047 ) > 5)
expect_length(x$Float_Characteristics$Modes$doubles_with_na, 176)
expect_length(x$Float_Characteristics$Modes$doubls, 200)
})
x$Float_Characteristics$Modes
x <- Numeric_Uni_EDA(basic_test_data)
x$Float_Characteristics
x$Float_Characteristics$Modes
test_that("Check float type key outputs are correct",{
x <- Numeric_Uni_EDA(basic_test_data)
expect_true(LRE(x$Float_Characteristics$Means[1], 48.11823) > 5)
expect_true(LRE(x$Float_Characteristics$Means[2], 48.51815) > 5)
expect_true(LRE(x$Float_Characteristics$Medians[1], 46.15422  ) > 5)
expect_true(LRE(x$Float_Characteristics$Medians[2], 46.26620 ) > 5)
expect_true(LRE(x$Float_Characteristics$Maxs[1], 98.49511 ) > 5)
expect_true(LRE(x$Float_Characteristics$Maxs[2], 98.49511) > 5)
expect_true(LRE(x$Float_Characteristics$Mins[1], 0.1947149  ) > 5)
expect_true(LRE(x$Float_Characteristics$Mins[2], 0.1947149 ) > 5)
expect_true(LRE(x$Float_Characteristics$I.Q.Rs[1], 48.63634  ) > 5)
expect_true(LRE(x$Float_Characteristics$I.Q.Rs[2], 50.45301 ) > 5)
expect_true(LRE(x$Float_Characteristics$S.Ds[1],  28.07992 ) > 5)
expect_true(LRE(x$Float_Characteristics$S.Ds[2], 28.18401) > 5)
expect_true(LRE(x$Float_Characteristics$Skews[1], 0.2098306) > 5)
expect_true(LRE(x$Float_Characteristics$Skews[2], 0.2397047 ) > 5)
expect_length(x$Float_Characteristics$Modes['doubles_with_na'], 176)
expect_length(x$Float_Characteristics$Modes['doubls'], 200)
})
x$Float_Characteristics$Modes['doubles_with_na']
test_that("Check float type key outputs are correct",{
x <- Numeric_Uni_EDA(basic_test_data)
expect_true(LRE(x$Float_Characteristics$Means[1], 48.11823) > 5)
expect_true(LRE(x$Float_Characteristics$Means[2], 48.51815) > 5)
expect_true(LRE(x$Float_Characteristics$Medians[1], 46.15422  ) > 5)
expect_true(LRE(x$Float_Characteristics$Medians[2], 46.26620 ) > 5)
expect_true(LRE(x$Float_Characteristics$Maxs[1], 98.49511 ) > 5)
expect_true(LRE(x$Float_Characteristics$Maxs[2], 98.49511) > 5)
expect_true(LRE(x$Float_Characteristics$Mins[1], 0.1947149  ) > 5)
expect_true(LRE(x$Float_Characteristics$Mins[2], 0.1947149 ) > 5)
expect_true(LRE(x$Float_Characteristics$I.Q.Rs[1], 48.63634  ) > 5)
expect_true(LRE(x$Float_Characteristics$I.Q.Rs[2], 50.45301 ) > 5)
expect_true(LRE(x$Float_Characteristics$S.Ds[1],  28.07992 ) > 5)
expect_true(LRE(x$Float_Characteristics$S.Ds[2], 28.18401) > 5)
expect_true(LRE(x$Float_Characteristics$Skews[1], 0.2098306) > 5)
expect_true(LRE(x$Float_Characteristics$Skews[2], 0.2397047 ) > 5)
expect_equal(x$Float_Characteristics$Modes['doubles_with_na'], "More than 10 values" )
expect_equal(x$Float_Characteristics$Modes['doubls'], "More than 10 values" )
})
test_that("Check float type key outputs are correct",{
x <- Numeric_Uni_EDA(basic_test_data)
expect_true(LRE(x$Float_Characteristics$Means[1], 48.11823) > 5)
expect_true(LRE(x$Float_Characteristics$Means[2], 48.51815) > 5)
expect_true(LRE(x$Float_Characteristics$Medians[1], 46.15422  ) > 5)
expect_true(LRE(x$Float_Characteristics$Medians[2], 46.26620 ) > 5)
expect_true(LRE(x$Float_Characteristics$Maxs[1], 98.49511 ) > 5)
expect_true(LRE(x$Float_Characteristics$Maxs[2], 98.49511) > 5)
expect_true(LRE(x$Float_Characteristics$Mins[1], 0.1947149  ) > 5)
expect_true(LRE(x$Float_Characteristics$Mins[2], 0.1947149 ) > 5)
expect_true(LRE(x$Float_Characteristics$I.Q.Rs[1], 48.63634  ) > 5)
expect_true(LRE(x$Float_Characteristics$I.Q.Rs[2], 50.45301 ) > 5)
expect_true(LRE(x$Float_Characteristics$S.Ds[1],  28.07992 ) > 5)
expect_true(LRE(x$Float_Characteristics$S.Ds[2], 28.18401) > 5)
expect_true(LRE(x$Float_Characteristics$Skews[1], 0.2098306) > 5)
expect_true(LRE(x$Float_Characteristics$Skews[2], 0.2397047 ) > 5)
expect_equal(x$Float_Characteristics$Modes['doubles_with_na'], c(doubles_with_na = "More than 10 values") )
expect_equal(x$Float_Characteristics$Modes['doubls'], c(doubls = "More than 10 values" ))
})
load_all()
build()
build_vignettes()
build_vignettes()
build_vignettes()
build()
document()
