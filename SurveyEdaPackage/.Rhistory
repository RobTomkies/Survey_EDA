output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c(1,'3', 'y', 4.2)
column_recog('integer', z,  trial_dataframe)
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c('x', 'y', 'doubls')
column_recog('integer', z,  trial_dataframe)
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
if(all(input_vector %in% names(dataset))){
output_vector <- match(input_vector, names(dataset))
}
else{
warning(paste('Not all names provided in ',force_type, ' forcing found in dataset, attempting to coerce\n' ))
}
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c('x', 'y', 'doubls')
column_recog('integer', z,  trial_dataframe)
z <- c('x', 'y', 'doubls', 4)
column_recog('integer', z,  trial_dataframe)
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
if(all(input_vector %in% names(dataset))){
output_vector <- match(input_vector, names(dataset))
}
else{
warning(paste('Not all names provided in ',force_type, ' forcing found in dataset, attempting to coerce\n' ))
}
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name \"',input_vector[i],'\" not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name \"',input_vector[i],'\" not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c('x', 'y', 'doubls', 4)
column_recog('integer', z,  trial_dataframe)
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
if(all(input_vector %in% names(dataset))){
output_vector <- match(input_vector, names(dataset))
}
else{
warning(paste('Not all names provided in ',force_type, ' forcing found in dataset, attempting to coerce\n' ))
}
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name \"',input_vector[i],'\" not found for', force_type,' forcing so coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name \"',input_vector[i],'\" not found for', force_type,' forcing so coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c('x', 'y', 'doubls', 4)
column_recog('integer', z,  trial_dataframe)
load_all()
load_all()
test()
load_all()
test()
load_all()
test()
column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe)
column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe)
load_all()
test()
load_all()
test()
load_all()
test()
x<- c(1.2,1,1)
as.integer(x)
x<- c(1.2,1,1,2)
as.integer(x)
load_all()
test()
load_all()
test()
load_all()
test()
column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe)
is.integer(column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe))
suppressWarnings(column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe))
load_all()
test()
load_all()
test()
load_all()
test()
column_recog_vector('integer', c(T, T, T, F, F),  trial_dataframe)
column_recog_vector('integer', c(T, T, T, F),  trial_dataframe)
load_all()
column_recog_vector('integer', c(T, T, T, F),  trial_dataframe)
load_all()
test()
load_all()
test()
load_all()
test()
column_recog_vector('integer', c(T, T, T, F),  trial_dataframe)
load_all()
test()
load_all()
test()
load_all()
test()
column_recog_vector('integer', c(T, T, T, F),  trial_dataframe)
load_all()
pacman::p_load(devtools, testthat, knitr, roxygen2)
load_all()
test()
load_all()
test()
load_all()
test()
load_all()
test()
x <- c(1,2,3,4,5)
y <- c('h', 'g', 't', 'f', 'p')
unique(x)
unique(y)
repeat(X)
repeat(x)
duplicated(x)
x <- c(1,2,3,4,5,3)
duplicated(x)
load_all()
test()
load_all()
test()
column_recog_vector('integer', c('x',1),  trial_dataframe)
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
column_recog_vector('integer', c('x',1),  trial_dataframe)
test_that("data type forcing error, integer index checks", {
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe), as.integer(c(1,2,3,4)))
})
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe), as.integer(c(1,2,3,4)))
test_that("data type forcing error, integer index checks", {
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe), as.integer(c(1,2,3,4)))
})
test_that("data type forcing error, integer index checks", {
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe), as.integer(c(1,2,3,4)))
capture_warnings(column_recog_vector('integer', c('x',1),  trial_dataframe))
})
column_recog_vector('integer', c('x',1),  trial_dataframe)
test_that("data type forcing error, integer index checks", {
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe), as.integer(c(1,2,3,4)))
w <- capture_warnings(column_recog_vector('integer', c('x',1),  trial_dataframe))
})
test_that("data type forcing error, integer index checks", {
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe), as.integer(c(1,2,3,4)))
w <- capture_warnings(column_recog_vector('integer', c('x',1),  trial_dataframe))
print(w)
})
test_that("data type forcing error, integer index checks", {
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe), as.integer(c(1,2,3,4)))
w <- capture_warnings(column_recog_vector('integer', c('x',1),  trial_dataframe))
expect_identical(w[1], "Not all names provided in  integer  forcing found in dataset, attempting to coerce\n")
expect_identical(w[2], "Name \" 1 \" not found for integer  forcing so coerced to integer\n")
expect_identical(w[3], "type 2: duplicate columns for forcing found - simplified to only one")
})
test_that("data type forcing error, integer index checks", {
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe), as.integer(c(1,2,3,4)))
w <- capture_warnings(column_recog_vector('integer', c('x',1),  trial_dataframe))
expect_identical(w[1], "Not all names provided in  integer  forcing found in dataset, attempting to coerce\n")
expect_identical(w[2], "Name \" 1 \" not found for integer  forcing so coerced to integer\n")
expect_identical(w[3], "type 2b: duplicate columns for forcing found - simplified to only one")
})
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c('x', 'y', 'doubls', 4)
column_recog('integer', z,  trial_dataframe)
column_recog_vector <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
if(any(duplicated(input_vector)) & !is.logical(input_vector)){
warning('type 1: duplicated found in forcing columns - simplified so only one present')
input_vector <- input_vector[!duplicated(input_vector)]
}
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
if(all(input_vector %in% names(dataset))){
output_vector <- match(input_vector, names(dataset))
}
else{
warning(paste('Not all names provided in ',force_type, ' forcing found in dataset, attempting to coerce\n' ))
}
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name \"',input_vector[i],'\" not found for', force_type,' forcing so coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name \"',input_vector[i],'\" not found for', force_type,' forcing so coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
if(any(duplicated(output_vector))){
warning('type 2: duplicate columns for forcing found - simplified to only one')
output_vector <- output_vector[!duplicated(output_vector)]
}
return(as.integer(output_vector))
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c('x', 'y', 'doubls', 4)
column_recog_vector('integer', z,  trial_dataframe)
z <- c('x', 'y', 'doubls')
column_recog_vector('integer', z,  trial_dataframe)
pacman::p_load(devtools, roxygen2, knitr, testthat)
load_all()
test()
column_recog_vector('integer', c('1', '2', '3'),  trial_dataframe)
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
column_recog_vector('integer', c('1', '2', '3'),  trial_dataframe)
x <- c(1,2,3)
paste('hello', x)
paste('hello', x, collapse = "")
paste('hello', paste(x, collapse = ", "))
load_all()
test_that("data input error catching", {
expect_error(data_type_detect(2), "Please pass a dataframe type structure to the function")
expect_error(data_type_detect(c(1,2,3,4,5,6)), "Please pass a dataframe type structure to the function")
expect_error(data_type_detect('hello'), "Please pass a dataframe type structure to the function")
expect_error(data_type_detect(matrix(data = c(1,2,3,45), nrow = 2)), "Please pass a dataframe type structure to the function")
expect_silent(data_type_detect(trial_dataframe))
})
test_that("data type forcing error, force type warnings working",{
expect_warning(column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe), 'Float type number provided for  integer  forcing so converted to integer')
expect_warning(column_recog_vector('string', c(1.1, 2, 3, 4),  trial_dataframe), 'Float type number provided for  string  forcing so converted to integer')
})
test_that("data type forcing, repeat column requests adjusted for",{
expect_warning(column_recog_vector('integer', c(1,1, 2, 3, 4),  trial_dataframe), 'type 1: duplicated found in forcing columns - simplified so only one present')
expect_warning(column_recog_vector('integer', c('x','x', 'y'),  trial_dataframe), 'type 1: duplicated found in forcing columns - simplified so only one present')
})
test_that("data type forcing error, integer index checks", {
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe), as.integer(c(1,2,3,4)))
w <- capture_warnings(column_recog_vector('integer', c('x',1),  trial_dataframe))
expect_identical(w[3], "type 2: duplicate columns for forcing found - simplified to only one")
})
test_that("data type forcing error, float index checks",{
expect_warning(column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe), 'Float type number provided for  integer  forcing so converted to integer')
expect_identical(suppressWarnings(column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe)), as.integer(c(1,2,3,4)))
})
test_that("data type forcing error, logical index checks",{
expect_silent(column_recog_vector('integer', c(T, T, T, F, F),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(T, T, T, F, F),  trial_dataframe), as.integer(c(1,2,3)))
expect_error(column_recog_vector('integer', c(T, T, F, F),  trial_dataframe), 'logical forcing vector for  integer  does not match the length of dataset columns please reconsider')
})
column_recog_vector('integer', c('1', '2', '3'),  trial_dataframe)
test_that("data type forcing error, string index checks",{
expect_silent(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe))
expect_identical(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe), as.integer(c(1,2,3)))
})
load_all()
column_recog_vector('integer', c('1', '2', '3'),  trial_dataframe)
load_all()
column_recog_vector('integer', c('1', '2', '3'),  trial_dataframe)
load_all()
column_recog_vector('integer', c('1', '2', '3'),  trial_dataframe)
load_all()
column_recog_vector('integer', c('1', '2', '3'),  trial_dataframe)
column_recog_vector('integer', c('1.2', '2', '3'),  trial_dataframe)
is.integer(1)
is.integer(3)
as.integer(3)
is.integer(as.integer(3))
as.integer(3) == as.double(3)
as.integer(3) == as.numeric(3)
is.integer(as.numeric(3))
is.integer(as.double(3))
?as.double
as.integer(3.2)
as.integer(3.2) == as.numeric(3.2)
load_all()
column_recog_vector('integer', c('1.2', '2', '3'),  trial_dataframe)
load_all()
column_recog_vector('integer', c('1.2', '2', '3'),  trial_dataframe)
load_all()
column_recog_vector('integer', c('1.2', '2', '3'),  trial_dataframe)
column_recog_vector('integer', c('1.2', '2', '3','4.4', 'words'),  trial_dataframe)
load_all()
column_recog_vector('integer', c('1.2', '2', '3','4.4', 'words'),  trial_dataframe)
test_that("data type forcing error, string index checks",{
expect_silent(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe))
expect_identical(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe), as.integer(c(1,2,3)))
w <- capture_warnings(column_recog_vector('integer', c('1.2', '2', '3','4.4', 'words'),  trial_dataframe))
expect_identical(w[2], 'Integer names " 2", "3 " not found for  integer  forcing but successfully coerced to integer')
})
test_that("data type forcing error, string index checks",{
expect_silent(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe))
expect_identical(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe), as.integer(c(1,2,3)))
w <- capture_warnings(column_recog_vector('integer', c('1.2', '2', '3','4.4', 'words'),  trial_dataframe))
expect_identical(w[2], 'Integer names \" 2\", \"3 \" not found for  integer  forcing but successfully coerced to integer')
})
load_all()
test_that("data type forcing error, string index checks",{
expect_silent(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe))
expect_identical(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe), as.integer(c(1,2,3)))
w <- capture_warnings(column_recog_vector('integer', c('1.2', '2', '3','4.4', 'words'),  trial_dataframe))
expect_identical(w[2],  "Integer names \" 2\", \"3 \" not found for  integer  forcing but successfully coerced to integer")
})
load_all()
column_recog_vector('integer', c('1.2', '2', '3','4.4', 'words'),  trial_dataframe)
test_that("data type forcing error, string index checks",{
expect_silent(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe))
expect_identical(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe), as.integer(c(1,2,3)))
w <- capture_warnings(column_recog_vector('integer', c('1.2', '2', '3','4.4', 'words'),  trial_dataframe))
expect_identical(w[2],  "Integer names  2, 3  not found for  integer  forcing but successfully coerced to integer")
})
load_all()
test()
test_that("data input error catching", {
expect_error(data_type_detect(2), "Please pass a dataframe type structure to the function")
expect_error(data_type_detect(c(1,2,3,4,5,6)), "Please pass a dataframe type structure to the function")
expect_error(data_type_detect('hello'), "Please pass a dataframe type structure to the function")
expect_error(data_type_detect(matrix(data = c(1,2,3,45), nrow = 2)), "Please pass a dataframe type structure to the function")
expect_silent(data_type_detect(trial_dataframe))
})
test_that("data type forcing error, force type warnings working",{
expect_warning(column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe), 'Float type number provided for  integer  forcing so converted to integer')
expect_warning(column_recog_vector('string', c(1.1, 2, 3, 4),  trial_dataframe), 'Float type number provided for  string  forcing so converted to integer')
})
test_that("data type forcing, repeat column requests adjusted for",{
expect_warning(column_recog_vector('integer', c(1,1, 2, 3, 4),  trial_dataframe), 'type 1: duplicated found in forcing columns - simplified so only one present')
expect_warning(column_recog_vector('integer', c('x','x', 'y'),  trial_dataframe), 'type 1: duplicated found in forcing columns - simplified so only one present')
})
test_that("data type forcing error, integer index checks", {
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe), as.integer(c(1,2,3,4)))
w <- capture_warnings(column_recog_vector('integer', c('x',1),  trial_dataframe))
expect_identical(w[3], "type 2: duplicate columns for forcing found - simplified to only one")
})
test_that("data type forcing error, integer index checks", {
expect_silent(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe), as.integer(c(1,2,3,4)))
w <- capture_warnings(column_recog_vector('integer', c('x',1),  trial_dataframe))
expect_identical(w[3], "type 2: duplicate columns for forcing found - simplified to only one\n")
})
test_that("data type forcing error, float index checks",{
expect_warning(column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe), 'Float type number provided for  integer  forcing so converted to integer')
expect_identical(suppressWarnings(column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe)), as.integer(c(1,2,3,4)))
})
test_that("data type forcing error, logical index checks",{
expect_silent(column_recog_vector('integer', c(T, T, T, F, F),  trial_dataframe))
expect_identical(column_recog_vector('integer', c(T, T, T, F, F),  trial_dataframe), as.integer(c(1,2,3)))
expect_error(column_recog_vector('integer', c(T, T, F, F),  trial_dataframe), 'logical forcing vector for  integer  does not match the length of dataset columns please reconsider')
})
test_that("data type forcing error, string index checks",{
expect_silent(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe))
expect_identical(column_recog_vector('integer', c('x', 'y', 'doubls'),  trial_dataframe), as.integer(c(1,2,3)))
w <- capture_warnings(column_recog_vector('integer', c('1.2', '2', '3','4.4', 'words'),  trial_dataframe))
expect_identical(w[2],  "Integer names  2, 3  not found for  integer  forcing but successfully coerced to integer\n")
})
column_recog_vector('integer', c('1.2', '2', '3','4.4', 'words'),  trial_dataframe)
load_all()
test()
load_all()
test()
is.vector(list(1,3,'d'))
is.vector(list(1,3,'d'))
is.list(c(1,2,3,4))
