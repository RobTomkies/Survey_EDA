x
is.vector(x)
is.list(x)
y <- c(1,2,3,4)
is.vector()
is.vector(y)
is.list(y)
x <- list(2, 'y', 7.2, T, c(1,2,3,4,5))
is.list(x)
is.vector(x)
as.numeric('1.2')
as.numeric('1.2a')
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#check for integer inputs
if(is.numeric(input_vector) & all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c(1,'3', 'y', 4.2)
column_recog('integer', z,  trial_dataframe)
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c(1,'3', 'y', 4.2)
column_recog('integer', z,  trial_dataframe)
x <- c('x', 'y', 'z', 'j', 'q')
y <- c('z', 'x', 'q')
which(y == x)
apply(x,y,which)
apply(y,x,which)
match(y, x)
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
if(all(input_vector %in% names(dataset))){
output_vector <- match(input_vector == names(dataset))
}
else{
warning(paste('Not all names provided in ',force_type, ' forcing found in dataset, attempting to coerce' ))
}
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c(1,'3', 'y', 4.2)
column_recog('integer', z,  trial_dataframe)
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
if(all(input_vector %in% names(dataset))){
output_vector <- match(input_vector == names(dataset))
}
else{
warning(paste('Not all names provided in ',force_type, ' forcing found in dataset, attempting to coerce' ))
}
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c(1,'3', 'y', 4.2)
column_recog('integer', z,  trial_dataframe)
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
if(all(input_vector %in% names(dataset))){
output_vector <- match(input_vector == names(dataset))
}
else{
warning(paste('Not all names provided in ',force_type, ' forcing found in dataset, attempting to coerce\n' ))
}
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
if(all(input_vector %in% names(dataset))){
output_vector <- match(input_vector == names(dataset))
}
else{
warning(paste('Not all names provided in ',force_type, ' forcing found in dataset, attempting to coerce\n' ))
}
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c(1,'3', 'y', 4.2)
column_recog('integer', z,  trial_dataframe)
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c('x', 'y', 'doubls')
column_recog('integer', z,  trial_dataframe)
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
if(all(input_vector %in% names(dataset))){
output_vector <- match(input_vector, names(dataset))
}
else{
warning(paste('Not all names provided in ',force_type, ' forcing found in dataset, attempting to coerce\n' ))
}
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name string',input_vector[i],' not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c('x', 'y', 'doubls')
column_recog('integer', z,  trial_dataframe)
z <- c('x', 'y', 'doubls', 4)
column_recog('integer', z,  trial_dataframe)
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
if(all(input_vector %in% names(dataset))){
output_vector <- match(input_vector, names(dataset))
}
else{
warning(paste('Not all names provided in ',force_type, ' forcing found in dataset, attempting to coerce\n' ))
}
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name \"',input_vector[i],'\" not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name \"',input_vector[i],'\" not found for', force_type,' coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c('x', 'y', 'doubls', 4)
column_recog('integer', z,  trial_dataframe)
column_recog <- function(force_type, input_vector, dataset){
output_vector <- rep(NA, length(input_vector))
#numeric values
if(is.numeric(input_vector)){
#check for integer inputs
if(all(input_vector-floor(input_vector)==0)){
output_vector <- input_vector
}
#check for float input and shift to int
else if(is.numeric(input_vector)){
warning(paste('Float type number provided for ', force_type,' forcing so converted to integer\n'))
output_vector <- as.integer(input_vector)
}
}
#check for logical input (why?)
else if(is.logical(input_vector)){
if(length(input_vector) != length(names(dataset))){
stop(paste('logical forcing vector for ', force_type, ' does not match the length of dataset columns\n please reconsider \n'))
}
output_vector <- which(input_vector == T)
}
else if(is.character(input_vector)){
if(all(input_vector %in% names(dataset))){
output_vector <- match(input_vector, names(dataset))
}
else{
warning(paste('Not all names provided in ',force_type, ' forcing found in dataset, attempting to coerce\n' ))
}
for(i in 1:length(input_vector)){
#integer as string and not in names
if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.integer(input_vector[i]))))){
warning(paste('Name \"',input_vector[i],'\" not found for', force_type,' forcing so coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#numeric but not integer and string
else if((!(input_vector[i] %in% names(dataset))) & (suppressWarnings(!is.na(as.numeric(input_vector[i]))))){
warning(paste('Name \"',input_vector[i],'\" not found for', force_type,' forcing so coerced to integer\n'))
output_vector[i] <- as.integer(input_vector[i])
}
#name of column used
else if(input_vector[i] %in% names(dataset)){
output_vector[i] <- which(names(dataset) == input_vector[i])
}
else(stop(paste('could not find column name ', input_vector[i], ' from ', force_type, ' forcing. Please reconsider\n')))
}
}
return(output_vector)
}
trial_dataframe <- data.frame(x = c(1,2,3,4,5,6,7,8), y = c(2,3,4,6,7,8,9,5), doubls = c(1.1,2,3,4.1,5.2,4.6,7.1,9.7),actual_int = c('1','2','3','4','5','6','7','8'),words = c('hello', 'my', 'name', 'is', 'rob', 'the', 'great', 'est'))
z <- c('x', 'y', 'doubls', 4)
column_recog('integer', z,  trial_dataframe)
load_all()
load_all()
test()
load_all()
test()
load_all()
test()
column_recog_vector('integer', c(1, 2, 3, 4),  trial_dataframe)
column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe)
load_all()
test()
load_all()
test()
load_all()
test()
x<- c(1.2,1,1)
as.integer(x)
x<- c(1.2,1,1,2)
as.integer(x)
load_all()
test()
load_all()
test()
load_all()
test()
column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe)
is.integer(column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe))
suppressWarnings(column_recog_vector('integer', c(1.1, 2, 3, 4),  trial_dataframe))
load_all()
test()
load_all()
test()
load_all()
test()
column_recog_vector('integer', c(T, T, T, F, F),  trial_dataframe)
column_recog_vector('integer', c(T, T, T, F),  trial_dataframe)
load_all()
column_recog_vector('integer', c(T, T, T, F),  trial_dataframe)
load_all()
test()
load_all()
test()
load_all()
test()
column_recog_vector('integer', c(T, T, T, F),  trial_dataframe)
load_all()
test()
load_all()
test()
load_all()
test()
column_recog_vector('integer', c(T, T, T, F),  trial_dataframe)
