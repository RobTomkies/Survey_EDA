return(dataset)
}
trial_data <- trial_dataframe
x <- c('x', 'ordinal_level_uno' ) #, c('doubls', 2,5,6)
z <- Nominal_Detect(x, trial_data, T, F)
Nominal_Detect <- function(input_vector, dataset, preserve_nonconform = T, force = F){
input_vector <- column_recog_vector('nominal', input_vector, dataset)
#initiate dataframe to hold any split out values if needed
split_column_hold <-  data.frame(matrix(ncol = length(input_vector), nrow = nrow(dataset)))
for(i in 1:length(input_vector)){
working_data <- dataset[,input_vector[i]]
if(force == T){
dataset[,input_vector[i]] <- factor(working_data)
}
if(length(working_data) <= 20 & force == F){
categorical <- table(working_data)>(0.1*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
if(prop_cat >= 0.9 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
print(names(table(working_data))[categorical]))
alternate_data[as.character(working_data) %in% (names(table(working_data))[categorical])] <- NA
#set data thats not in categories to NA
working_data[!(as.character(working_data) %in% (names(table(working_data))[categorical]))] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.9 & preserve_nonconform == F){
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
else if (length(working_data) > 20 & force == F){
categorical <- table(working_data)>(0.05*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
if(prop_cat >= 0.95 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
alternate_data[working_data %in% names(table(working_data))[categorical]] <- NA
#set data thats not in categories to NA
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.95 & preserve_nonconform == F){
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
}
split_column_hold <- Filter(function(x)!all(is.na(x)), split_column_hold)
dataset <- cbind(dataset, split_column_hold)
return(dataset)
}
Nominal_Detect <- function(input_vector, dataset, preserve_nonconform = T, force = F){
input_vector <- column_recog_vector('nominal', input_vector, dataset)
#initiate dataframe to hold any split out values if needed
split_column_hold <-  data.frame(matrix(ncol = length(input_vector), nrow = nrow(dataset)))
for(i in 1:length(input_vector)){
working_data <- dataset[,input_vector[i]]
if(force == T){
dataset[,input_vector[i]] <- factor(working_data)
}
if(length(working_data) <= 20 & force == F){
categorical <- table(working_data)>(0.1*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
if(prop_cat >= 0.9 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
print(names(table(working_data))[categorical])
alternate_data[as.character(working_data) %in% (names(table(working_data))[categorical])] <- NA
#set data thats not in categories to NA
working_data[!(as.character(working_data) %in% (names(table(working_data))[categorical]))] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.9 & preserve_nonconform == F){
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
else if (length(working_data) > 20 & force == F){
categorical <- table(working_data)>(0.05*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
if(prop_cat >= 0.95 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
alternate_data[working_data %in% names(table(working_data))[categorical]] <- NA
#set data thats not in categories to NA
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.95 & preserve_nonconform == F){
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
}
split_column_hold <- Filter(function(x)!all(is.na(x)), split_column_hold)
dataset <- cbind(dataset, split_column_hold)
return(dataset)
}
trial_data <- trial_dataframe
x <- c('x', 'ordinal_level_uno' ) #, c('doubls', 2,5,6)
z <- Nominal_Detect(x, trial_data, T, F)
trial_data <- trial_dataframe
x <- c('x', 'ordinal_level_uno' ) #, c('doubls', 2,5,6)
trial_data <- trial_dataframe
xb <- c('x', 'ordinal_level_uno' ) #, c('doubls', 2,5,6)
z <- Nominal_Detect(xb, trial_data, T, F)
trial_data <- trial_dataframe
xb <- c('x', 'ordinal_level_uno' ) #, c('doubls', 2,5,6)
z <- Nominal_Detect(xb, trial_data, T, F)
Nominal_Detect <- function(input_vector, dataset, preserve_nonconform = T, force = F){
input_vector <- column_recog_vector('nominal', input_vector, dataset)
#initiate dataframe to hold any split out values if needed
split_column_hold <-  data.frame(matrix(ncol = length(input_vector), nrow = nrow(dataset)))
for(i in 1:length(input_vector)){
working_data <- dataset[,input_vector[i]]
if(force == T){
dataset[,input_vector[i]] <- factor(working_data)
}
if(length(working_data) <= 20 & force == F){
categorical <- table(working_data)>(0.1*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
print(prop_cat)
if(prop_cat >= 0.9 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
print(names(table(working_data))[categorical])
alternate_data[as.character(working_data) %in% (names(table(working_data))[categorical])] <- NA
#set data thats not in categories to NA
working_data[!(as.character(working_data) %in% (names(table(working_data))[categorical]))] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.9 & preserve_nonconform == F){
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
else if (length(working_data) > 20 & force == F){
categorical <- table(working_data)>(0.05*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
if(prop_cat >= 0.95 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
alternate_data[working_data %in% names(table(working_data))[categorical]] <- NA
#set data thats not in categories to NA
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.95 & preserve_nonconform == F){
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
}
split_column_hold <- Filter(function(x)!all(is.na(x)), split_column_hold)
dataset <- cbind(dataset, split_column_hold)
return(dataset)
}
trial_data <- trial_dataframe
xb <- c('x', 'ordinal_level_uno' ) #, c('doubls', 2,5,6)
z <- Nominal_Detect(xb, trial_data, T, F)
trial_data
Nominal_Detect <- function(input_vector, dataset, preserve_nonconform = T, force = F){
input_vector <- column_recog_vector('nominal', input_vector, dataset)
#initiate dataframe to hold any split out values if needed
split_column_hold <-  data.frame(matrix(ncol = length(input_vector), nrow = nrow(dataset)))
for(i in 1:length(input_vector)){
working_data <- dataset[,input_vector[i]]
if(force == T){
dataset[,input_vector[i]] <- factor(working_data)
}
if(length(working_data) <= 20 & force == F){
categorical <- table(working_data)>(0.1*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
print(prop_cat)
if(prop_cat >= 0.8 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
print(names(table(working_data))[categorical])
alternate_data[as.character(working_data) %in% (names(table(working_data))[categorical])] <- NA
#set data thats not in categories to NA
working_data[!(as.character(working_data) %in% (names(table(working_data))[categorical]))] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.9 & preserve_nonconform == F){
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
else if (length(working_data) > 20 & force == F){
categorical <- table(working_data)>(0.05*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
if(prop_cat >= 0.95 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
alternate_data[working_data %in% names(table(working_data))[categorical]] <- NA
#set data thats not in categories to NA
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.95 & preserve_nonconform == F){
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
}
split_column_hold <- Filter(function(x)!all(is.na(x)), split_column_hold)
dataset <- cbind(dataset, split_column_hold)
return(dataset)
}
trial_data <- trial_dataframe
xb <- c('x', 'ordinal_level_uno' ) #, c('doubls', 2,5,6)
z <- Nominal_Detect(xb, trial_data, T, F)
z
Nominal_Detect <- function(input_vector, dataset, preserve_nonconform = T, force = F){
input_vector <- column_recog_vector('nominal', input_vector, dataset)
#initiate dataframe to hold any split out values if needed
split_column_hold <-  data.frame(matrix(ncol = length(input_vector), nrow = nrow(dataset)))
for(i in 1:length(input_vector)){
working_data <- dataset[,input_vector[i]]
if(force == T){
dataset[,input_vector[i]] <- factor(working_data)
}
if(length(working_data) <= 20 & force == F){
categorical <- table(working_data)>(0.1*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
if(prop_cat >= 0.8 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
alternate_data[as.character(working_data) %in% (names(table(working_data))[categorical])] <- NA
#set data thats not in categories to NA
working_data[!(as.character(working_data) %in% (names(table(working_data))[categorical]))] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.8 & preserve_nonconform == F){
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
else if (length(working_data) > 20 & force == F){
categorical <- table(working_data)>(0.05*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
if(prop_cat >= 0.9 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
alternate_data[as.character(working_data) %in% (names(table(working_data))[categorical])] <- NA
#set data thats not in categories to NA
working_data[!(as.character(working_data) %in% (names(table(working_data))[categorical]))] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.95 & preserve_nonconform == F){
working_data[working_data %in% names(table(working_data))[categorical]] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
}
split_column_hold <- Filter(function(x)!all(is.na(x)), split_column_hold)
dataset <- cbind(dataset, split_column_hold)
return(dataset)
}
trial_data <- trial_dataframe
xb <- c('x', 'ordinal_level_uno' ) #, c('doubls', 2,5,6)
z <- Nominal_Detect(xb, trial_data, T, F)
z
trial_data <- trial_dataframe
xb <- c('x', 'ordinal_level_uno' ) #, c('doubls', 2,5,6)
z <- Nominal_Detect(xb, trial_data, F, F)
z
Nominal_Detect <- function(input_vector, dataset, preserve_nonconform = T, force = F){
input_vector <- column_recog_vector('nominal', input_vector, dataset)
#initiate dataframe to hold any split out values if needed
split_column_hold <-  data.frame(matrix(ncol = length(input_vector), nrow = nrow(dataset)))
for(i in 1:length(input_vector)){
working_data <- dataset[,input_vector[i]]
if(force == T){
dataset[,input_vector[i]] <- factor(working_data)
}
if(length(working_data) <= 20 & force == F){
categorical <- table(working_data)>(0.1*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
if(prop_cat >= 0.8 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
alternate_data[as.character(working_data) %in% (names(table(working_data))[categorical])] <- NA
#set data thats not in categories to NA
working_data[!(as.character(working_data) %in% (names(table(working_data))[categorical]))] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.8 & preserve_nonconform == F){
working_data[!(working_data %in% names(table(working_data))[categorical])] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
else if (length(working_data) > 20 & force == F){
categorical <- table(working_data)>(0.05*length(working_data))
prop_cat <- sum(table(working_data)[categorical])/length(working_data)
if(prop_cat >= 0.9 & preserve_nonconform == T){
#set up name trigger to ensure no double naming
name_trigger <- F
running_name <- paste(names(dataset)[input_vector[i]], '_other_nominal')
while(name_trigger == F){
if(running_name %in% names(dataset)){
running_name <- paste(running_name, '_.')
}
else{
name_trigger <- T
}
}
names(split_column_hold)[i] <- running_name
alternate_data <- working_data
#set data thats in categories to NA
alternate_data[as.character(working_data) %in% (names(table(working_data))[categorical])] <- NA
#set data thats not in categories to NA
working_data[!(as.character(working_data) %in% (names(table(working_data))[categorical]))] <- NA
split_column_hold[i] <- alternate_data
dataset[,input_vector[i]] <- factor(working_data)
rm(alternate_data)
rm(working_data)
}
else if(prop_cat >= 0.95 & preserve_nonconform == F){
working_data[!(working_data %in% names(table(working_data))[categorical])] <- NA
dataset[,input_vector[i]] <- factor(working_data)
rm(working_data)
}
}
}
split_column_hold <- Filter(function(x)!all(is.na(x)), split_column_hold)
dataset <- cbind(dataset, split_column_hold)
return(dataset)
}
trial_data <- trial_dataframe
xb <- c('x', 'ordinal_level_uno' ) #, c('doubls', 2,5,6)
z <- Nominal_Detect(xb, trial_data, F, F)
z
z <- Nominal_Detect(xb, trial_data, F, T)
z
